<?php
/**
 * Ajax routine to Store Device id token generated from Google's FireBase
 * based on user subscription from browser to allow push notifications.
 *
 * @param string   $_POST['device_id'] Device id sent from firebase ajax routine
 * @param string   $_POST['subscriptionoptions'] Push notification subscription code using Firebase as push notification provider
 * @param string   $_POST['onesignal_subscriptionoptions'] Push notification subscription code using Onesignal as push notification provider
 * @param string   $_POST['pushtype'] Push notification call types using Firebase/Onesignal push notification
 * @param string   $_POST['onesignal_externalid'] Onesignal push notification external id
 * @param string   $_POST['pnfpb_endpoint'] Push notification Subscription endpoint
 * @param string   $_POST['pnfpb_options'] Push notification subscription vapid key
 *
 *
 * @since 1.0.0
 */
require __DIR__ . '/../../vendor/autoload.php';


/** Get instance of class to subscribe Firebase topics based on  subscription options **/
$PNFPB_ajax_subscription_update_obj = new PNFPB_httpv1_subscription_option_update();

// phpcs:ignoreFile WordPress.DB.DirectDatabaseQuery

$bpdeviceid = '';
if (isset($_POST['device_id'])) {
    /** Sanitize the device id generated by Google's Firebase for the user who subscribed push notification  **/
    $bpdeviceid = sanitize_text_field($_POST['device_id']);
}
$bpsubscribeoptions = '10000000000';
if (isset($_POST['subscriptionoptions'])) {
    $bpsubscribeoptions = sanitize_text_field($_POST['subscriptionoptions']);
    $bpsubscribeoptions = esc_html($bpsubscribeoptions);
}
if (isset($_POST['onesignal_subscriptionoptions'])) {
    $bpsubscribeoptions = sanitize_text_field($_POST['onesignal_subscriptionoptions']);
    $bpsubscribeoptions = esc_html($bpsubscribeoptions);
}
if ($bpsubscribeoptions === '' || $bpsubscribeoptions === '10000') {
    $bpsubscribeoptions = '10000000000';
}
$bponesignalid = 0;
if (isset($_POST['onesignal_get_subscriptionoptions_id'])) {
    $bponesignalid = sanitize_text_field($_POST['onesignal_get_subscriptionoptions_id']);
    $bponesignalid = esc_html($bponesignalid);
    if ($bponesignalid === '1pnfpbadm') {
        $bponesignalid = 1;
    }
    if ($bponesignalid === null || ($bponesignalid !== null && !is_numeric($bponesignalid)) || $bponesignalid === '') {
        $bponesignalid = 0;
    }
}
if (isset($_POST['progressier_subscriptionoptions'])) {
    $bpsubscribeoptions = sanitize_text_field($_POST['progressier_subscriptionoptions']);
    $bpsubscribeoptions = esc_html($bpsubscribeoptions);
    if ($bpsubscribeoptions === '' || $bpsubscribeoptions === '10000') {
        $bpsubscribeoptions = '10000000000';
    }
}
$bpprogressierid = 0;
if (isset($_POST['progressier_get_subscriptionoptions_id'])) {
    $bpprogressierid = sanitize_text_field($_POST['progressier_get_subscriptionoptions_id']);
    $bpprogressierid = esc_html($bpprogressierid);
    if ($bpprogressierid === null || ($bpprogressierid !== null && !is_numeric($bpprogressierid)) || $bpprogressierid === '') {
        $bpprogressierid = 0;
    }
}

$bpwebtoappid = 0;
if (isset($_POST['webtoapp_userid'])) {
    $bpwebtoappid = sanitize_text_field($_POST['webtoapp_userid']);
    $bpwebtoappid = esc_html($bpwebtoappid);
    if ($bpwebtoappid === null || ($bpwebtoappid !== null && !is_numeric($bpwebtoappid)) || $bpwebtoappid === '') {
        $bpwebtoappid = 0;
    }
}

$bpwebtoapp_deviceid = '';
if (isset($_POST['webtoapp_deviceid'])) {
    $bpwebtoapp_deviceid = sanitize_text_field($_POST['webtoapp_deviceid']);
    $bpwebtoapp_deviceid = esc_html($bpwebtoapp_deviceid);
}
/** securing data from Firebase who subscribed push notification  **/
$bpdeviceid = esc_html($bpdeviceid);
$pushtype = 'normal';
$pnfpbshortcodeactive = 'no';
global $wpdb;
$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
$dbname = $wpdb->dbname;
if (isset($_POST['pushtype'])) {
    $pushtype = sanitize_text_field(wp_unslash($_POST['pushtype']));
    $pushtype = esc_html($pushtype);
}
$isadminpage = 'no';
if (isset($_POST['pnfpbshortcodeactive'])) {
    if (isset($_POST['isadminpage'])) {
        $isadminpage = sanitize_text_field(wp_unslash($_POST['isadminpage']));
    }
    $pnfpbshortcodeactive = sanitize_text_field($_POST['pnfpbshortcodeactive']);
    $pnfpbshortcodeactive = esc_html($pnfpbshortcodeactive);
}
$pnfpb_endpoint = null;
$pnfpb_options = null;
$pnfpb_ipaddress = null;
if (isset($_POST['pnfpb_endpoint'])) {
    $pnfpb_endpoint = sanitize_text_field($_POST['pnfpb_endpoint']);
}
if (isset($_POST['pnfpb_options'])) {
    $pnfpb_options = sanitize_text_field($_POST['pnfpb_options']);
}
if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
    $pnfpb_ipaddress = sanitize_text_field($_SERVER['HTTP_CLIENT_IP']);
}
//whether ip is from the proxy
elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    $pnfpb_ipaddress = sanitize_text_field($_SERVER['HTTP_X_FORWARDED_FOR']);
}
//whether ip is from the remote address
else {
    $pnfpb_ipaddress = sanitize_text_field($_SERVER['REMOTE_ADDR']);
}
$bpuserid = 0;
if (is_user_logged_in()) {
    $bpuserid = get_current_user_id();
}
/*********************************************************************************************
 * To send Firebase credentials to Javascript to process push notification
 *
 **********************************************************************************************/
if ($pushtype == 'icfirebasecred') {
    echo wp_json_encode(array('apiKey' => get_option('pnfpb_ic_fcm_api'), 'authDomain' => get_option('pnfpb_ic_fcm_authdomain'), 'databaseURL' => get_option('pnfpb_ic_fcm_databaseurl'), 'projectId' => get_option('pnfpb_ic_fcm_projectid'), 'storageBucket' => get_option('pnfpb_ic_fcm_storagebucket'), 'messagingSenderId' => get_option('pnfpb_ic_fcm_messagingsenderid'), 'appId' => get_option('pnfpb_ic_fcm_appid'), 'publicKey' => get_option('pnfpb_ic_fcm_publickey')));
}

/*********************************************************************************************
* Update webtoapp subscribed user id and device id in WordPress PNFPB plugin table
 * pnfpb_ic_subscribed_deviceids_web
 **********************************************************************************************/
 if ($pushtype === 'webtoapp_subscribed_users') {
	 
        $results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table, $bpwebtoappid, '%' . $wpdb->esc_like($bpwebtoapp_deviceid) . '%')));
        if (count($results) <= 0) {
            $data = array('userid' => $bpwebtoappid, 'device_id' => $bpwebtoapp_deviceid, 'subscription_option' => '100000000000', 'ip_address' => $pnfpb_ipaddress);
            $insertstatus = $wpdb->insert($table, $data);
            if (!$insertstatus) {
                echo wp_json_encode(array('subscriptionstatus' => 'error', 'message' => $insertstatus));
            } else {
                echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'message' => $bpwebtoapp_deviceid));
            }
        } else {
            foreach ($results as $result) {
                if ($result->subscription_option === null || $result->subscription_option === '') {
                    $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $bpwebtoappid)));
                }
            }
            echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'message' => $result->device_id));
        }	 
	 
 }
/*********************************************************************************************
 * Update Progressier subscribed user external id in WordPress PNFPB plugin table
 * pnfpb_ic_subscribed_deviceids_web
 **********************************************************************************************/
if ($pushtype === 'progressier_subscribed_users') {
    $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
    $dbname = $wpdb->dbname;
    if (isset($_POST['progressier_external_id'])) {
        $progressier_externalid = sanitize_text_field($_POST['progressier_external_id']);
        $progressier_externalid = esc_html($progressier_externalid);
        if ($progressier_externalid === null || ($progressier_externalid !== null && !is_numeric($progressier_externalid)) || $progressier_externalid === '') {
            $progressier_externalid = 0;
        }
        $results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table,$progressier_externalid, '%' . $wpdb->esc_like('progressier') . '%')));
        if (count($results) <= 0) {
            $length = 10;
            $progressier_deviceid = substr(str_shuffle('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'), 1, $length) . 'progressier@N';
            $data = array('userid' => $progressier_externalid, 'device_id' => $progressier_deviceid, 'subscription_option' => '100000000000', 'ip_address' => $pnfpb_ipaddress);
            $insertstatus = $wpdb->insert($table, $data);
            if (!$insertstatus) {
                echo wp_json_encode(array('subscriptionstatus' => 'error', 'message' => $insertstatus));
            } else {
                echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'message' => $progressier_deviceid));
            }
        } else {
            foreach ($results as $result) {
                if ($result->subscription_option === null || $result->subscription_option === '') {
                    $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $progressier_externalid)));
                }
            }
            echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'message' => $result->device_id));
        }
    }
}
/*********************************************************************************************
 * Update Onesignal subscribed user external id in WordPress PNFPB plugin table
 * pnfpb_ic_subscribed_deviceids_web
 **********************************************************************************************/
if ($pushtype == 'onesignal_subscribed_users') {
    $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
    $dbname = $wpdb->dbname;
    if (isset($_POST['onesignal_externalid'])) {
        $onesignal_externalid = sanitize_text_field($_POST['onesignal_externalid']);
        $onesignal_externalid = esc_html($onesignal_externalid);
        if ($onesignal_externalid === '1pnfpbadm') {
            $onesignal_externalid = 1;
        }
        if ($onesignal_externalid === null || ($onesignal_externalid !== null && !is_numeric($onesignal_externalid)) || $onesignal_externalid === '') {
            $onesignal_externalid = 0;
        }
        $results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table,$onesignal_externalid, '%' . $wpdb->esc_like('onesignal') . '%')));
        if (count($results) <= 0) {
            $data = array('userid' => $onesignal_externalid, 'device_id' => 'onesignal@N', 'subscription_option' => '100000000000', 'ip_address' => $pnfpb_ipaddress);
            $insertstatus = $wpdb->insert($table, $data);
            if (!$insertstatus) {
                echo "error in inserting onesignal subscription details in PNFPB for id: " . esc_html($onesignal_externalid);
            } else {
                echo '';
            }
        } else {
            foreach ($results as $result) {
                if ($result->subscription_option === null || $result->subscription_option === '') {
                    $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $onesignal_externalid)));
                }
            }
        }
    }
}
/*********************************************************************************************
 * Get User's Onesignal Frontend subscription code from WordPress PNFPB plugin table
 * pnfpb_ic_subscribed_deviceids_web
 **********************************************************************************************/
if ($pushtype == 'onesignal_get_frontend_subscriptions') {
    $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
    $dbname = $wpdb->dbname;
    $data = '';
    if ($bponesignalid !== 0) {
        $results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table,$bponesignalid, '%' . $wpdb->esc_like('onesignal') . '%')));
        foreach ($results as $result) {
            $data = array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $result->subscription_option);
        }
        echo wp_json_encode($data);
    } else {
        echo wp_json_encode(array('subscriptionstatus' => 'notsubscribed', 'subscriptionoptions' => ''));
    }
}
/*********************************************************************************************
 * Update Onesignal Frontend subscription code in WordPress PNFPB plugin table
 * pnfpb_ic_subscribed_deviceids_web
 **********************************************************************************************/
if ($pushtype == 'onesignal_frontend_subscriptions') {
    $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
    $dbname = $wpdb->dbname;
    if ($bpuserid !== 0) {
        $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $bpuserid)));
    }
    echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
}
/*********************************************************************************************
 * Get User's Progressier Frontend subscription code from WordPress PNFPB plugin table
 * pnfpb_ic_subscribed_deviceids_web
 **********************************************************************************************/
if ($pushtype == 'progressier_get_frontend_subscriptions') {
    $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
    $dbname = $wpdb->dbname;
    $data = '';
    if ($bpprogressierid !== 0) {
        $results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table,$bpprogressierid, '%' . $wpdb->esc_like('progressier') . '%')));
        foreach ($results as $result) {
            $data = array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $result->subscription_option);
        }
        echo wp_json_encode($data);
    } else {
        echo wp_json_encode(array('subscriptionstatus' => 'notsubscribed', 'subscriptionoptions' => ''));
    }
}
/*********************************************************************************************
 * Update Progressier Frontend subscription code in WordPress PNFPB plugin table
 * pnfpb_ic_subscribed_deviceids_web
 **********************************************************************************************/
if ($pushtype == 'progressier_frontend_subscriptions') {
    $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
    $dbname = $wpdb->dbname;
    if ($bpuserid !== 0) {
        $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $bpuserid)));
    }
    echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
}
/*********************************************************************************************
 * Add New user's Firebase subscription details in WordPress PNFPB plugin table
 * pnfpb_ic_subscribed_deviceids_web
 **********************************************************************************************/
if ($bpdeviceid != '' && $pushtype == 'normal') {
    $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
    $dbname = $wpdb->dbname;
    $deviceid_exists = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s ", array($table,'%' . $wpdb->esc_like($bpdeviceid) . '%')));
    foreach ($deviceid_exists as $result) {
        if ($result->userid == 0 || $result->userid != $bpuserid) {
            $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET userid = %d WHERE device_id LIKE %s", $table,$bpuserid, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
        }
        if (is_null($result->web_auth)) {
            $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET web_auth = %s, web_256 = %s, ip_address = %s WHERE device_id LIKE %s", $table,$pnfpb_endpoint, $pnfpb_options, $pnfpb_ipaddress, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
        }
    }
    if (count($deviceid_exists) > 0) {
        $results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s AND (device_id NOT LIKE %s OR device_id LIKE %s)", $table, '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%', '%' . $wpdb->esc_like('webview') . '%'));
        $version_value = 'L';
        foreach ($results as $result) {
            $version_value = $result->firebase_version;
        }
        /*********************************************************************************************
         * Automate Migrate user's subscription token from Legacy Firebase to latest
         * Firebase httpv1 api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
         **********************************************************************************************/
        if (($version_value !== 'httpv3' && $version_value !== 'httpv4' && $version_value !== 'httpv5') && get_option('pnfpb_httpv1_push') === '1') {
            $client = new Google_Client();
            // Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
            $client->useApplicationDefaultCredentials();
            // Alternatively, provide the JSON authentication file directly.
            $configArray = json_decode(get_option('pnfpb_sa_json_data'), true);
            $client->setAuthConfig($configArray);
            // Add the scope as a string (multiple scopes can be provided as an array)
            $client->addScope('https://www.googleapis.com/auth/firebase.messaging');
            $client->refreshTokenWithAssertion();
            $pnfpb_fbauth_token_array = $client->getAccessToken();
            $pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
            $url = 'https://iid.googleapis.com/iid/v1:batchAdd';
            $headers = array('Authorization' => 'Bearer ' . $pnfpb_fbauth_token, 'Content-Type' => 'application/json', 'access_token_auth' => 'true');
            if (get_option('pnfpb_ic_fcm_loggedin_notify') && get_option('pnfpb_ic_fcm_loggedin_notify') === '1') {
                $fields = array("to" => "/topics/pnfpbgeneralloggedin", "registration_tokens" => array($bpdeviceid));
            } else {
                $fields = array("to" => "/topics/pnfpbgeneral", "registration_tokens" => array($bpdeviceid));
            }
            $body = wp_json_encode($fields);
            $args = array('httpversion' => '1.0', 'blocking' => true, 'sslverify' => false, 'body' => $body, 'headers' => $headers);
            $apiresults = wp_remote_post($url, $args);
            $deviceid_version_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET firebase_version = %s WHERE device_id LIKE %s", $table,'httpv5', $bpdeviceid));
        }
        $results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE firebase_version != %s AND device_id LIKE %s AND (device_id LIKE %s OR device_id NOT LIKE %s)", $table, 'httpv2', '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%', '%' . $wpdb->esc_like('webview') . '%'));
        $version_value = 'L';
        foreach ($results as $result) {
            $version_value = $result->firebase_version;
            $device_id = $result->device_id;
            $device_id_array = explode("!!", $device_id);
            if (count($device_id_array) > 1) {
                $group_id = $device_id_array[1];
                $topics = '/topics/pnfpbgroupid' . $bpgroupid;
                /*********************************************************************************************
                 * Automate Migrate user's subscription token from Legacy Firebase to latest
                 * Firebase httpv1 api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
                 **********************************************************************************************/
                if (($version_value !== 'httpv3' && $version_value !== 'httpv4' && $version_value !== 'httpv5') && get_option('pnfpb_httpv1_push') === '1') {
                    $client = new Google_Client();
                    // Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
                    $client->useApplicationDefaultCredentials();
                    // Alternatively, provide the JSON authentication file directly.
                    $configArray = json_decode(get_option('pnfpb_sa_json_data'), true);
                    $client->setAuthConfig($configArray);
                    // Add the scope as a string (multiple scopes can be provided as an array)
                    $client->addScope('https://www.googleapis.com/auth/firebase.messaging');
                    $client->refreshTokenWithAssertion();
                    $pnfpb_fbauth_token_array = $client->getAccessToken();
                    $pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
                    $url = 'https://iid.googleapis.com/iid/v1:batchAdd';
                    $headers = array('Authorization' => 'Bearer ' . $pnfpb_fbauth_token, 'Content-Type' => 'application/json', 'access_token_auth' => 'true');
                    $fields = array("to" => $topics, "registration_tokens" => array($bpdeviceid));
                    $body = wp_json_encode($fields);
                    $args = array('httpversion' => '1.0', 'blocking' => true, 'sslverify' => false, 'body' => $body, 'headers' => $headers);
                    $apiresults = wp_remote_post($url, $args);
                    $deviceid_version_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET firebase_version = %s WHERE device_id LIKE %s", $table,'httpv5', $bpdeviceid));
                }
            }
        }
        echo "duplicate";
    } else {
        $data = array('userid' => $bpuserid, 'device_id' => $bpdeviceid, 'subscription_option' => $bpsubscribeoptions, 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'ip_address' => $pnfpb_ipaddress, 'firebase_version' => 'httpv5');
        $insertstatus = $wpdb->insert($table, $data);
        if (!$insertstatus || $insertstatus != 0) {
            $my_id = $wpdb->insert_id;
			if ($isadminpage === 'no' && ($pnfpbshortcodeactive === 'yes' || $pnfpbshortcodeactive === 'no')) {
        		update_option('pnfpb_shortcode_enable', $pnfpbshortcodeactive);
    		}
            echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
        } else {
            echo wp_json_encode(array('subscriptionstatus' => 'fail', 'subscriptionoptions' => $bpsubscribeoptions));
        }
        /*********************************************************************************************
         * Automate Migrate user's subscription token from Legacy Firebase to latest
         * Firebase httpv1 api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
         **********************************************************************************************/
		
         $subscription_option_array = array();
		
         if ($bpsubscribeoptions != '') {
             $subscription_option_array = str_split($bpsubscribeoptions);
          }
				
          if (get_option('pnfpb_httpv1_push') === '1' && $bpsubscribeoptions !== '' && (count($subscription_option_array) > 0 && $subscription_option_array[0] !== '1')) {
				$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_multiple_subscription_option_update($bpsubscribeoptions,$bpdeviceid);
          }

          if (get_option('pnfpb_httpv1_push') === '1' && (count($subscription_option_array) <= 0 || (count($subscription_option_array) > 0 && $subscription_option_array[0] === '1'))) {
				$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_default_subscription_option_update($bpdeviceid);
           }
    }
} else {
    /*********************************************************************************************
     * Add user's Firebase subscription details from Frontend subscription button in WordPress
     * PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
     **********************************************************************************************/
    if ($pushtype == 'subscribe-button') {
        $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
        $dbname = $wpdb->dbname;
		
		$old_subscription_option = '';
		$old_subscription_option_values = $wpdb->get_col($wpdb->prepare("SELECT subscription_option FROM %i WHERE device_id LIKE %s", $table, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
        foreach ($old_subscription_option_values as $old_subscription_option_value) {
            $old_subscription_option = $old_subscription_option_value;
		}
		
		$subscription_option_array = array();
		$old_subscription_option_array = array();
		
        if ($bpsubscribeoptions != '') {
			
         	$subscription_option_array = str_split($bpsubscribeoptions);
			
			if (get_option('pnfpb_ic_fcm_buddypress_comments_radio_enable') === '2' && count($subscription_option_array) > 3 && $subscription_option_array[2] === '1') {
				$subscription_option_array[2] = '0';
				$subscription_option_array[3] = '1';
				$bpsubscribeoptions = implode("",$subscription_option_array);
			}
			
        }
			
        if ($old_subscription_option != '') {
			
         	$old_subscription_option_array = str_split($old_subscription_option);
			
			if (get_option('pnfpb_ic_fcm_buddypress_comments_radio_enable') === '2' && count($old_subscription_option_array) > 3 && $old_subscription_option_array[2] === '1') {
				$old_subscription_option_array[2] = '0';
				$old_subscription_option_array[3] = '1';
				$old_subscription_option = implode("",$old_subscription_option_array);
			}
			
        }

        if ($bpdeviceid !== '') {
            if ($bpuserid !== 0) {
                $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", $table,$bpsubscribeoptions, $bpuserid));
                $deviceid_group_update_status = $deviceid_update_status;
            } else {
                $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s AND device_id NOT LIKE %s", $table,$bpsubscribeoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%'));
                $deviceid_group_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s AND device_id LIKE %s", $table,$bpsubscribeoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%'));
            }
            $deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
            $version_values = $wpdb->get_col($wpdb->prepare("SELECT firebase_version FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
            $version_value = 'L';
            foreach ($version_values as $value) {
              $version_value = $value;
            }
            /*********************************************************************************************
            * Automate Migrate user's subscription token from Legacy Firebase to latest
            * Firebase httpv1 api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
            **********************************************************************************************/

			if (get_option('pnfpb_httpv1_push') === '1' && $bpsubscribeoptions !== '') {
					$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_multiple_subscription_option_update($bpsubscribeoptions,$bpdeviceid,'',$old_subscription_option,$version_value);
            }

            if (($version_value !== 'httpv3' && $version_value !== 'httpv4' && $version_value !== 'httpv5') && get_option('pnfpb_httpv1_push') === '1' && (count($subscription_option_array) <= 0 || (count($subscription_option_array) > 0 && $subscription_option_array[0] === '1'))) {
				$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_default_subscription_option_update($bpdeviceid);
             }
             echo wp_json_encode(array('subscriptionstatus' => 'subscribed updated', 'subscriptionoptions' => $bpsubscribeoptions));
         } else {
            if ($bpuserid !== 0) {
                $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", $table,$bpsubscribeoptions, $bpuserid));
            } else {
                $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s AND device_id NOT LIKE ", $table,$bpsubscribeoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%'));
                $deviceid_group_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s AND device_id LIKE %s", $table,$bpsubscribeoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%'));
            }
            $deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
            $version_values = $wpdb->get_col($wpdb->prepare("SELECT firebase_version FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
            $version_value = 'L';
            foreach ($version_values as $value) {
                    $version_value = $value;
            }
            /*********************************************************************************************
            * Automate Migrate user's subscription token from Legacy Firebase to latest Firebase
            * httpv1 api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
            **********************************************************************************************/
            if (get_option('pnfpb_httpv1_push') === '1' && $bpsubscribeoptions !== '') {
				$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_multiple_subscription_option_update($bpsubscribeoptions,$bpdeviceid,'',$old_subscription_option,$version_value);
            }

            if (($version_value !== 'httpv3' && $version_value !== 'httpv4' && $version_value !== 'httpv5') && get_option('pnfpb_httpv1_push') === '1' && (count($subscription_option_array) <= '0' || (count($subscription_option_array) > 0 && $subscription_option_array[0] === '1'))) {
				$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_default_subscription_option_update($bpdeviceid);
            }
           	echo wp_json_encode(array('subscriptionstatus' => 'subscribed webview', 'subscriptionoptions' => $bpsubscribeoptions));
        }
    } else {
        /*********************************************************************************************
         * Check User's Push notification subscription details in WordPress PNFPB plugin table
         * pnfpb_ic_subscribed_deviceids_web
         **********************************************************************************************/
        if ($pushtype == 'checkdeviceid') {
            $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
            $dbname = $wpdb->dbname;
            if ($bpdeviceid !== '') {
                $deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
                $subscribed = true;
                foreach ($deviceid_select_status as $result) {
                    if ($result->userid == 0 || ($result->userid != $bpuserid && $bpuserid !== 0)) {
                        $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET userid = %d WHERE device_id LIKE %s", $table,$bpuserid, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
                    }
                    if (is_null($result->web_auth)) {
                        $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET web_auth = %s,web_256 = %s,ip_address = %s WHERE device_id LIKE %s", $table,$pnfpb_endpoint, $pnfpb_options, $pnfpb_ipaddress, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
                    }
                    $subscriptionoptions = $result->subscription_option;
                    if ($subscriptionoptions === '10000' || $subscriptionoptions === '' || $subscriptionoptions === NULL || $subscriptionoptions === null || $subscriptionoptions === 'NULL') {
                        $subscriptionoptions = '100000000000';
                        $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s", $table,$subscriptionoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
                    }
                    if (strpos($result->device_id, '@N') !== false || $subscriptionoptions === '000000000000' || $subscriptionoptions === '000000000010') {
                        $subscribed = false;
                    }
                }
            } else {
                $subscriptionoptions = '000000000000';
                if (($bpdeviceid === '' || $bpsubscribeoptions === '000000000000' || $bpsubscribeoptions === '') && $bpuserid != 0) {
                    $deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d", $table,$bpuserid));
                    foreach ($deviceid_select_status as $result) {
                        $subscriptionoptions = $result->subscription_option;
                    }
                }
            }
            if ($deviceid_select_status != null && count($deviceid_select_status) > 0) {
                if ($subscribed) {
                    $version_values = $wpdb->get_col($wpdb->prepare("SELECT firebase_version FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
                    $version_value = 'L';
                    foreach ($version_values as $value) {
                        $version_value = $value;
                    }
                    /*********************************************************************************************
                     * Automate Migrate user's subscription token from Legacy Firebase to latest Firebase
                     * httpv1 api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
                     **********************************************************************************************/
					$bpsubscriptionoptions = $subscriptionoptions;
                    if (($version_value !== 'httpv4' && $version_value !== 'httpv5') && get_option('pnfpb_httpv1_push') === '1' && $subscriptionoptions !== '' && (get_option('pnfpb_custom_prompt_options_on_off') === '1' || get_option('pnfpb_bell_icon_prompt_options_on_off') === '1' || get_option('pnfpb_ic_fcm_frontend_enable_subscription') === '1' || get_option('pnfpb_shortcode_enable') === 'yes')) {
                        $PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_multiple_subscription_option_update($bpsubscribeoptions,$bpdeviceid,'checkdeviceid',$version_value);
                    }
                    $subscription_option_array = array();
                    if ($subscriptionoptions != '') {
                        $subscription_option_array = str_split($subscriptionoptions);
                    }
                    if (($version_value !== 'httpv4' && $version_value !== 'httpv5') && get_option('pnfpb_httpv1_push') === '1' && (count($subscription_option_array) <= '0' || (count($subscription_option_array) > 0 && $subscription_option_array[0] === '1'))) {
                        $PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_default_subscription_option_update($bpdeviceid);
                    }
                    echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $subscriptionoptions));
                } else {
                    echo wp_json_encode(array('subscriptionstatus' => 'not-subscribed', 'subscriptionoptions' => $subscriptionoptions));
                }
            } else {
                if ($bpdeviceid !== '') {
                    $data = array('userid' => $bpuserid, 'device_id' => $bpdeviceid, 'subscription_option' => '100000000000', 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'ip_address' => $pnfpb_ipaddress, 'firebase_version' => 'httpv5');
                    $insertstatus = $wpdb->insert($table, $data);
                    if (!$insertstatus || $insertstatus != 0) {
                        $my_id = $wpdb->insert_id;
						if ($isadminpage === 'no' && ($pnfpbshortcodeactive === 'yes' || $pnfpbshortcodeactive === 'no')) {
        					update_option('pnfpb_shortcode_enable', $pnfpbshortcodeactive);
    					}						
                        echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
                    } else {
                        echo wp_json_encode(array('subscriptionstatus' => 'not-subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
                    }
                    /*********************************************************************************************
                     * Automate Migrate user's subscription token from Legacy Firebase to latest Firebase httpv1
                     * api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
                     **********************************************************************************************/
                    if (get_option('pnfpb_httpv1_push') === '1') {
                        $PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_default_subscription_option_update($bpdeviceid);
                    }
                }
            }
        } else {
            /*********************************************************************************************
             * Check User's Push notification subscription details for BuddyPress group in WordPress PNFPB
             * plugin table pnfpb_ic_subscribed_deviceids_web
             **********************************************************************************************/
            if ($bpdeviceid != '' && $pushtype == 'checkdeviceidforgroup') {
                $bpgroupid = sanitize_text_field($_POST['bpgroup_id']);
                $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
                $deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s AND userid = %d", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%' . '!!' . $bpgroupid, $bpuserid));
                $subscribed = true;
                $subscriptionoptions = '000000000000';
                if (count($deviceid_select_status) > 0) {
                    $version_value = 'L';
                    foreach ($deviceid_select_status as $result) {
                        $version_value = $result->firebase_version;
                        $subscriptionoptions = $result->subscription_option;
                        if ($subscriptionoptions === '10000' || $subscriptionoptions === '' || $subscriptionoptions === NULL || $subscriptionoptions === null || $subscriptionoptions === 'NULL') {
                            $subscriptionoptions = '100000000000';
                            $deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s", $table, $subscriptionoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
                        }
                        /*********************************************************************************************
                         * Automate Migrate user's subscription token from Legacy Firebase to latest Firebase
                         * httpv1 api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
                         **********************************************************************************************/
                        if (($version_value !== 'httpv3' && $version_value !== 'httpv4' && $version_value !== 'httpv5') && get_option('pnfpb_httpv1_push') === '1') {
                            $group_name = groups_get_slug($bpgroupid);
                            $client = new Google_Client();
                            // Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
                            $client->useApplicationDefaultCredentials();
                            // Alternatively, provide the JSON authentication file directly.
                            $configArray = json_decode(get_option('pnfpb_sa_json_data'), true);
                            $client->setAuthConfig($configArray);
                            // Add the scope as a string (multiple scopes can be provided as an array)
                            $client->addScope('https://www.googleapis.com/auth/firebase.messaging');
                            $client->refreshTokenWithAssertion();
                            $pnfpb_fbauth_token_array = $client->getAccessToken();
                            $pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
                            $url = 'https://iid.googleapis.com/iid/v1:batchAdd';
                            $headers = array('Authorization' => 'Bearer ' . $pnfpb_fbauth_token, 'Content-Type' => 'application/json', 'access_token_auth' => 'true');
                            $grouptopic = "/topics/" . $group_name;
                            $fields = array("to" => $grouptopic, "registration_tokens" => array($bpdeviceid));
                            $body = wp_json_encode($fields);
                            $args = array('httpversion' => '1.0', 'blocking' => true, 'sslverify' => false, 'body' => $body, 'headers' => $headers);
                            $apiresults = wp_remote_post($url, $args);
                            $deviceid_version_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET firebase_version = %s WHERE device_id LIKE %s", $table,'httpv5', '%' . $wpdb->esc_like($bpdeviceid) . '%'));
                        }
                    }
                    echo "subscribed";
                } else {
                    echo "not-subscribed";
                }
            } else {
                /*********************************************************************************************
                 * Update User's BuddyPress group Push notification subscription details in WordPress
                 * PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
                 **********************************************************************************************/
                if ($bpdeviceid != '' && $pushtype == 'subscribe-group-button') {
                    $bpgroupid = sanitize_text_field($_POST['bpgroup_id']);
                    $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
                    $dbname = $wpdb->dbname;
                    $cookievalue = '';
                    if (isset($_COOKIE['pnfpb_group_push_notification_' . $bpgroupid])) {
                        $cookievalue = $_COOKIE['pnfpb_group_push_notification_' . $bpgroupid];
                    }
                    $bpnewdeviceid = $bpdeviceid . '!!' . $bpgroupid . '!!' . $cookievalue;
                    $deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
                    $subscribed = true;
                    $subscriptionoptions = '000000000000';
                    foreach ($deviceid_select_status as $result) {
                        $subscriptionoptions = $result->subscription_option;
                    }
                    $uniqueid = uniqid();
                    setcookie('pnfpb_group_push_notification_' . $bpgroupid, $uniqueid, time() + (86400 * 30), "/"); // 86400 = 1 day
                    $bpnewdeviceid = $bpdeviceid . '!!' . $bpgroupid . '!!' . $uniqueid;
                    $data = array('userid' => $bpuserid, 'device_id' => $bpnewdeviceid, 'subscription_option' => $subscriptionoptions, 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'ip_address' => $pnfpb_ipaddress, 'firebase_version' => 'httpv3');
                    $insertstatus = $wpdb->insert($table, $data);
                    if (!$insertstatus || $insertstatus != 0) {
                        $my_id = $wpdb->insert_id;
                        echo 'subscribed';
                    } else {
                        echo wp_json_encode(array('subscriptionstatus' => 'deleted'));
                    }
                    /*********************************************************************************************
                     * Automate Migrate user's subscription token from Legacy Firebase to latest
                     * Firebase httpv1 api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
                     **********************************************************************************************/
                    if (get_option('pnfpb_httpv1_push') === '1') {
                        $group_name = 'pnfpbgroupid' . $bpgroupid;
                        $client = new Google_Client();
                        // Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
                        $client->useApplicationDefaultCredentials();
                        // Alternatively, provide the JSON authentication file directly.
                        $configArray = json_decode(get_option('pnfpb_sa_json_data'), true);
                        $client->setAuthConfig($configArray);
                        // Add the scope as a string (multiple scopes can be provided as an array)
                        $client->addScope('https://www.googleapis.com/auth/firebase.messaging');
                        $client->refreshTokenWithAssertion();
                        $pnfpb_fbauth_token_array = $client->getAccessToken();
                        $pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
                        $url = 'https://iid.googleapis.com/iid/v1:batchAdd';
                        $headers = array('Authorization' => 'Bearer ' . $pnfpb_fbauth_token, 'Content-Type' => 'application/json', 'access_token_auth' => 'true');
                        $grouptopic = "/topics/" . $group_name;
                        $fields = array("to" => $grouptopic, "registration_tokens" => array($bpdeviceid));
                        $body = wp_json_encode($fields);
                        $args = array('httpversion' => '1.0', 'blocking' => true, 'sslverify' => false, 'body' => $body, 'headers' => $headers);
                        $apiresults = wp_remote_post($url, $args);
                    }
                } else {
                    /*********************************************************************************************
                     * Un-subscribe group push notification in PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
                     **********************************************************************************************/
                    if ($bpdeviceid != '' && $pushtype == 'unsubscribe-group-button') {
                        $bpgroupid = sanitize_text_field($_POST['bpgroup_id']);
                        $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
                        $cookievalue = '';
                        if (isset($_COOKIE['pnfpb_group_push_notification_' . $bpgroupid])) {
                            $cookievalue = $_COOKIE['pnfpb_group_push_notification_' . $bpgroupid];
                        }
                        $bpolddeviceid = $bpdeviceid . '!!' . $bpgroupid . '!!' . $cookievalue;
                        $deviceid_update_status = $wpdb->query($wpdb->prepare("DELETE from %i WHERE userid = %d AND device_id LIKE %s", $table,$bpuserid, '%' . $wpdb->esc_like($bpolddeviceid) . '%'));
                        $group_name = 'pnfpbgroupid' . $bpgroupid;
                        /*********************************************************************************************
                         * Automate Migrate user's subscription token from Legacy Firebase to latest
                         * Firebase httpv1 api version in WordPress PNFPB plugin table  pnfpb_ic_subscribed_deviceids_web
                         **********************************************************************************************/
                        if (get_option('pnfpb_httpv1_push') === '1') {
                            $client = new Google_Client();
                            // Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
                            $client->useApplicationDefaultCredentials();
                            // Alternatively, provide the JSON authentication file directly.
                            $configArray = json_decode(get_option('pnfpb_sa_json_data'), true);
                            $client->setAuthConfig($configArray);
                            // Add the scope as a string (multiple scopes can be provided as an array)
                            $client->addScope('https://www.googleapis.com/auth/firebase.messaging');
                            $client->refreshTokenWithAssertion();
                            $pnfpb_fbauth_token_array = $client->getAccessToken();
                            $pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
                            $url = 'https://iid.googleapis.com/iid/v1:batchRemove';
                            $headers = array('Authorization' => 'Bearer ' . $pnfpb_fbauth_token, 'Content-Type' => 'application/json', 'access_token_auth' => 'true');
                            $grouptopic = "/topics/" . $group_name;
                            $fields = array("to" => $grouptopic, "registration_tokens" => array($bpdeviceid));
                            $body = wp_json_encode($fields);
                            $args = array('httpversion' => '1.0', 'blocking' => true, 'sslverify' => false, 'body' => $body, 'headers' => $headers);
                            $apiresults = wp_remote_post($url, $args);
                        }
                        if ($deviceid_update_status > 0) {
                            echo wp_json_encode(array('subscriptionstatus' => 'deleted'));
                        } else {
                            echo wp_json_encode(array('subscriptionstatus' => 'failed in unsubscribe button'));
                        }
                    } else {
                        /*********************************************************************************************
                         * Delete user's Push notification token in WordPress PNFPB plugin table
                         * pnfpb_ic_subscribed_deviceids_web
                         **********************************************************************************************/
                        if ($bpdeviceid != '' && $pushtype == 'deletepushtoken') {
                            $table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
                            $deviceid_update_status = $wpdb->query($wpdb->prepare("DELETE from %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
                            if ($deviceid_update_status > 0) {
								if ($isadminpage === 'no' && ($pnfpbshortcodeactive === 'yes' || $pnfpbshortcodeactive === 'no')) {
        							update_option('pnfpb_shortcode_enable', $pnfpbshortcodeactive);
    							}								
                                echo wp_json_encode(array('subscriptionstatus' => 'deleted', 'deviceidupdatestauts' => $deviceid_update_status, 'deviceid' => $bpdeviceid));
                            } else {
                                echo wp_json_encode(array('subscriptionstatus' => 'failed in deleting push token', 'deviceidupdatestauts' => $deviceid_update_status, 'deviceid' => $bpdeviceid));
                            }
                        } else {
                            if ($pushtype !== 'icfirebasecred' && $pushtype !== 'onesignal_subscribed_users' && $pushtype !== 'onesignal_frontend_subscriptions' && $pushtype !== 'onesignal_get_frontend_subscriptions' && $pushtype !== 'webtoapp_subscribed_users' && $pushtype !== 'progressier_subscribed_users' && $pushtype !== 'progressier_frontend_subscriptions' && $pushtype !== 'progressier_get_frontend_subscriptions') {
                                echo wp_json_encode(array('subscriptionstatus' => 'failed'));
                            }
                        }
                    }
                }
            }
        }
    }
}
wp_die();
?>