<?php
/**
 * Ajax routine to Store Device id token generated from Google's FireBase
 * based on user subscription from browser to allow push notifications.
 *
 * @param string   $_POST['device_id'] Device id sent from firebase ajax routine
 * @param string   $_POST['subscriptionoptions'] Push notification subscription code using Firebase as push notification provider
 * @param string   $_POST['onesignal_subscriptionoptions'] Push notification subscription code using Onesignal as push notification provider
 * @param string   $_POST['pushtype'] Push notification call types using Firebase/Onesignal push notification
 * @param string   $_POST['onesignal_externalid'] Onesignal push notification external id
 * @param string   $_POST['pnfpb_endpoint'] Push notification Subscription endpoint
 * @param string   $_POST['pnfpb_options'] Push notification subscription vapid key
 *
 *
 * @since 1.0.0
 */

// Check the nonce first
if ( ! isset( $_POST['nonce'] ) || ! wp_verify_nonce( sanitize_text_field(wp_unslash($_POST['nonce'])), 'pnfpbpushnonce' ) ) {
	echo wp_json_encode(array('subscriptionstatus' => 'error', 'message' => 'Security validation failed'));
} else {
	require __DIR__ . '/../../vendor/autoload.php';


	/** Get instance of class to subscribe Firebase topics based on  subscription options **/
	$PNFPB_ajax_subscription_update_obj = new PNFPB_httpv1_subscription_option_update();

	// phpcs:ignoreFile WordPress.DB.DirectDatabaseQuery

	$bpdeviceid = '';
	if (isset($_POST['device_id'])) {
		/** Sanitize the device id generated by Google's Firebase for the user who subscribed push notification  **/
		$bpdeviceid = sanitize_text_field($_POST['device_id']);
	}
	$bpsubscribeoptions = '10000000000';
	if (isset($_POST['subscriptionoptions'])) {
		$bpsubscribeoptions = sanitize_text_field($_POST['subscriptionoptions']);
		$bpsubscribeoptions = esc_html($bpsubscribeoptions);
	}
	if (isset($_POST['onesignal_subscriptionoptions'])) {
		$bpsubscribeoptions = sanitize_text_field($_POST['onesignal_subscriptionoptions']);
		$bpsubscribeoptions = esc_html($bpsubscribeoptions);
	}
	if ($bpsubscribeoptions === '' || $bpsubscribeoptions === '10000') {
		$bpsubscribeoptions = '10000000000';
	}
	$bponesignalid = 0;
	if (isset($_POST['onesignal_get_subscriptionoptions_id'])) {
		$bponesignalid = sanitize_text_field($_POST['onesignal_get_subscriptionoptions_id']);
		$bponesignalid = esc_html($bponesignalid);
		if ($bponesignalid === '1pnfpbadm') {
			$bponesignalid = 1;
		}
		if ($bponesignalid === null || ($bponesignalid !== null && !is_numeric($bponesignalid)) || $bponesignalid === '') {
			$bponesignalid = 0;
		}
	}
	if (isset($_POST['progressier_subscriptionoptions'])) {
		$bpsubscribeoptions = sanitize_text_field($_POST['progressier_subscriptionoptions']);
		$bpsubscribeoptions = esc_html($bpsubscribeoptions);
		if ($bpsubscribeoptions === '' || $bpsubscribeoptions === '10000') {
			$bpsubscribeoptions = '10000000000';
		}
	}
	$bpprogressierid = 0;
	if (isset($_POST['progressier_get_subscriptionoptions_id'])) {
		$bpprogressierid = sanitize_text_field($_POST['progressier_get_subscriptionoptions_id']);
		$bpprogressierid = esc_html($bpprogressierid);
		if ($bpprogressierid === null || ($bpprogressierid !== null && !is_numeric($bpprogressierid)) || $bpprogressierid === '') {
			$bpprogressierid = 0;
		}
	}

	$bpwebtoappid = 0;
	if (isset($_POST['webtoapp_userid'])) {
		$bpwebtoappid = sanitize_text_field($_POST['webtoapp_userid']);
		$bpwebtoappid = esc_html($bpwebtoappid);
		if ($bpwebtoappid === null || ($bpwebtoappid !== null && !is_numeric($bpwebtoappid)) || $bpwebtoappid === '') {
			$bpwebtoappid = 0;
		}
	}

	$bpwebtoapp_deviceid = '';
	if (isset($_POST['webtoapp_deviceid'])) {
		$bpwebtoapp_deviceid = sanitize_text_field($_POST['webtoapp_deviceid']);
		$bpwebtoapp_deviceid = esc_html($bpwebtoapp_deviceid);
	}

	/** securing data from Firebase who subscribed push notification  **/
	$bpdeviceid = esc_html($bpdeviceid);
	$pushtype = 'normal';
	global $wpdb;
	$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
	$dbname = $wpdb->dbname;
	if (isset($_POST['pushtype'])) {
		$pushtype = sanitize_text_field(wp_unslash($_POST['pushtype']));
		$pushtype = esc_html($pushtype);
	}
	
	$delivered_notification_title = '';
	$delivered_notification_content = '';
	$delivered_notification_browser = '';
	$delivered_notification_token = '';
	$delivered_notification_id = 0;
	$delivered_notification_userid = 0;
	$delivered_notification_confirmation = 0;
	$delivered_notification_opened_confirmation = 0;	
	
	if ($pushtype === 'delivery_confirmation' || $pushtype === 'opened_confirmation') {
		
		if (isset($_POST['title'])) {
			$delivered_notification_title = esc_html(sanitize_text_field(wp_unslash($_POST['title'])));
		}
		if (isset($_POST['content'])) {
			$delivered_notification_content = esc_html(sanitize_text_field(wp_unslash($_POST['content'])));
		}
		if (isset($_POST['notification_id'])) {
			$delivered_notification_id = esc_html(sanitize_text_field(wp_unslash($_POST['notification_id'])));
		}
		if (isset($_POST['browser_type'])) {
			$delivered_notification_browser = esc_html(sanitize_text_field(wp_unslash($_POST['browser_type'])));
		}
		if (isset($_POST['token'])) {
			$delivered_notification_token = esc_html(sanitize_text_field(wp_unslash($_POST['token'])));
		}		
		if ($delivered_notification_id === '') {
			$delivered_notification_id = 0;
		} else {
			$delivered_notification_id = intval($delivered_notification_id);
		}
		if (isset($_POST['userid'])) {	
			$delivered_notification_userid = esc_html(sanitize_text_field(wp_unslash($_POST['userid'])));
		}
			
		if ($delivered_notification_userid === '') {
			$delivered_notification_userid = 0;
		} else {
			$delivered_notification_userid = intval($delivered_notification_userid);
		}
		
		if (isset($_POST['delivery_confirmation'])) {
			$delivered_notification_confirmation = esc_html(sanitize_text_field(wp_unslash($_POST['delivery_confirmation'])));
		}
			
		if ($delivered_notification_confirmation === '') {
			$delivered_notification_confirmation = 0;
		} else {
			$delivered_notification_confirmation = intval($delivered_notification_confirmation);
		}
		
		if (isset($_POST['opened_confirmation'])) {
			$delivered_notification_opened_confirmation = esc_html(sanitize_text_field(wp_unslash($_POST['opened_confirmation'])));
		}
			
		if ($delivered_notification_opened_confirmation === '') {
			$delivered_notification_opened_confirmation = 0;
		} else {
			$delivered_notification_opened_confirmation = intval($delivered_notification_opened_confirmation);
		}		

	}	

	$pnfpb_endpoint = null;
	$pnfpb_options = null;
	$pnfpb_ipaddress = null;
	$pnfpb_subscription_auth_token = null;
	
	if (isset($_POST['pnfpb_endpoint'])) {
		$pnfpb_endpoint = sanitize_text_field($_POST['pnfpb_endpoint']);
	}
	if (isset($_POST['pnfpb_options'])) {
		$pnfpb_options = sanitize_text_field($_POST['pnfpb_options']);
	}
	if (isset($_POST['pnfpb_subscription_token'])) {
		$pnfpb_subscription_auth_token = sanitize_text_field($_POST['pnfpb_subscription_token']);
	}	
	if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
		$pnfpb_ipaddress = sanitize_text_field($_SERVER['HTTP_CLIENT_IP']);
	}
	//whether ip is from the proxy
	elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
		$pnfpb_ipaddress = sanitize_text_field($_SERVER['HTTP_X_FORWARDED_FOR']);
	}
	//whether ip is from the remote address
	else {
		$pnfpb_ipaddress = sanitize_text_field($_SERVER['REMOTE_ADDR']);
	}
	$bpuserid = 0;
	if (is_user_logged_in()) {
		$bpuserid = get_current_user_id();
	}
	/*********************************************************************************************
	 * To send Firebase credentials to Javascript to process push notification
	 *
	 **********************************************************************************************/
	if ($pushtype === 'icfirebasecred') {
		echo wp_json_encode(array('apiKey' => get_option('pnfpb_ic_fcm_api'), 'authDomain' => get_option('pnfpb_ic_fcm_authdomain'), 'databaseURL' => get_option('pnfpb_ic_fcm_databaseurl'), 'projectId' => get_option('pnfpb_ic_fcm_projectid'), 'storageBucket' => get_option('pnfpb_ic_fcm_storagebucket'), 'messagingSenderId' => get_option('pnfpb_ic_fcm_messagingsenderid'), 'appId' => get_option('pnfpb_ic_fcm_appid'), 'publicKey' => get_option('pnfpb_ic_fcm_publickey'), 'pnfpb_authsw_token' => '0'));
	}
	/*********************************************************************************************
	 * To send webpush credentials to Javascript to process push notification
	 *
	 **********************************************************************************************/
	if ($pushtype === 'icwebpushcred') {
		echo wp_json_encode(array('vapidKey' => get_option("pnfpb_web_push_vapid_public_key")));
	}
	/*********************************************************************************************
	* Update webtoapp subscribed user id and device id in WordPress PNFPB plugin table
	 * pnfpb_ic_subscribed_deviceids_web
	 **********************************************************************************************/
	 if ($pushtype === 'webtoapp_subscribed_users') {

			$results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table, $bpwebtoappid, '%' . $wpdb->esc_like($bpwebtoapp_deviceid) . '%')));
			if (count($results) <= 0) {
				$data = array('userid' => $bpwebtoappid, 'device_id' => $bpwebtoapp_deviceid, 'subscription_option' => '100000000000', 'ip_address' => $pnfpb_ipaddress);
				$insertstatus = $wpdb->insert($table, $data);
				if (!$insertstatus) {
					echo wp_json_encode(array('subscriptionstatus' => 'error', 'message' => $insertstatus));
				} else {
					echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'message' => $bpwebtoapp_deviceid));
				}
			} else {
				foreach ($results as $result) {
					if ($result->subscription_option === null || $result->subscription_option === '') {
						$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $bpwebtoappid)));
					}
				}
				echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'message' => $result->device_id));
			}	 

	 }
	/*********************************************************************************************
	 * Update Progressier subscribed user external id in WordPress PNFPB plugin table
	 * pnfpb_ic_subscribed_deviceids_web
	 **********************************************************************************************/
	if ($pushtype === 'progressier_subscribed_users') {
		$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
		$dbname = $wpdb->dbname;
		if (isset($_POST['progressier_external_id'])) {
			$progressier_externalid = sanitize_text_field($_POST['progressier_external_id']);
			$progressier_externalid = esc_html($progressier_externalid);
			if ($progressier_externalid === null || ($progressier_externalid !== null && !is_numeric($progressier_externalid)) || $progressier_externalid === '') {
				$progressier_externalid = 0;
			}
			$results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table,$progressier_externalid, '%' . $wpdb->esc_like('progressier') . '%')));
			if (count($results) <= 0) {
				$length = 10;
				$progressier_deviceid = substr(str_shuffle('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'), 1, $length) . 'progressier@N';
				$data = array('userid' => $progressier_externalid, 'device_id' => $progressier_deviceid, 'subscription_option' => '100000000000', 'ip_address' => $pnfpb_ipaddress);
				$insertstatus = $wpdb->insert($table, $data);
				if (!$insertstatus) {
					echo wp_json_encode(array('subscriptionstatus' => 'error', 'message' => $insertstatus));
				} else {
					echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'message' => $progressier_deviceid));
				}
			} else {
				foreach ($results as $result) {
					if ($result->subscription_option === null || $result->subscription_option === '') {
						$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $progressier_externalid)));
					}
				}
				echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'message' => $result->device_id));
			}
		}
	}
	/*********************************************************************************************
	 * Update Onesignal subscribed user external id in WordPress PNFPB plugin table
	 * pnfpb_ic_subscribed_deviceids_web
	 **********************************************************************************************/
	if ($pushtype === 'onesignal_subscribed_users') {
		$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
		$dbname = $wpdb->dbname;
		if (isset($_POST['onesignal_externalid'])) {
			$onesignal_externalid = sanitize_text_field($_POST['onesignal_externalid']);
			$onesignal_externalid = esc_html($onesignal_externalid);
			if ($onesignal_externalid === '1pnfpbadm') {
				$onesignal_externalid = 1;
			}
			if ($onesignal_externalid === null || ($onesignal_externalid !== null && !is_numeric($onesignal_externalid)) || $onesignal_externalid === '') {
				$onesignal_externalid = 0;
			}
			$results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table,$onesignal_externalid, '%' . $wpdb->esc_like('onesignal') . '%')));
			if (count($results) <= 0) {
				$data = array('userid' => $onesignal_externalid, 'device_id' => 'onesignal@N', 'subscription_option' => '100000000000', 'ip_address' => $pnfpb_ipaddress);
				$insertstatus = $wpdb->insert($table, $data);
				if (!$insertstatus) {
					echo "error in inserting onesignal subscription details in PNFPB for id: " . esc_html($onesignal_externalid);
				} else {
					echo '';
				}
			} else {
				foreach ($results as $result) {
					if ($result->subscription_option === null || $result->subscription_option === '') {
						$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $onesignal_externalid)));
					}
				}
			}
		}
	}
	/*********************************************************************************************
	 * Get User's Onesignal Frontend subscription code from WordPress PNFPB plugin table
	 * pnfpb_ic_subscribed_deviceids_web
	 **********************************************************************************************/
	if ($pushtype === 'onesignal_get_frontend_subscriptions') {
		$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
		$dbname = $wpdb->dbname;
		$data = '';
		if ($bponesignalid !== 0) {
			$results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table,$bponesignalid, '%' . $wpdb->esc_like('onesignal') . '%')));
			foreach ($results as $result) {
				$data = array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $result->subscription_option);
			}
			echo wp_json_encode($data);
		} else {
			echo wp_json_encode(array('subscriptionstatus' => 'notsubscribed', 'subscriptionoptions' => ''));
		}
	}
	/*********************************************************************************************
	 * Update Onesignal Frontend subscription code in WordPress PNFPB plugin table
	 * pnfpb_ic_subscribed_deviceids_web
	 **********************************************************************************************/
	if ($pushtype === 'onesignal_frontend_subscriptions') {
		$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
		$dbname = $wpdb->dbname;
		if ($bpuserid !== 0) {
			$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $bpuserid)));
		}
		echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
	}
	/*********************************************************************************************
	 * Get User's Progressier Frontend subscription code from WordPress PNFPB plugin table
	 * pnfpb_ic_subscribed_deviceids_web
	 **********************************************************************************************/
	if ($pushtype === 'progressier_get_frontend_subscriptions') {
		$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
		$dbname = $wpdb->dbname;
		$data = '';
		if ($bpprogressierid !== 0) {
			$results = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d AND device_id LIKE %s", array($table,$bpprogressierid, '%' . $wpdb->esc_like('progressier') . '%')));
			foreach ($results as $result) {
				$data = array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $result->subscription_option);
			}
			echo wp_json_encode($data);
		} else {
			echo wp_json_encode(array('subscriptionstatus' => 'notsubscribed', 'subscriptionoptions' => ''));
		}
	}
	/*********************************************************************************************
	 * Update Progressier Frontend subscription code in WordPress PNFPB plugin table
	 * pnfpb_ic_subscribed_deviceids_web
	 **********************************************************************************************/
	if ($pushtype === 'progressier_frontend_subscriptions') {
		$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
		$dbname = $wpdb->dbname;
		if ($bpuserid !== 0) {
			$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", array($table,$bpsubscribeoptions, $bpuserid)));
		}
		echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
	}
	

	/*******************************************************************************************************
	* Update Notification delivery and read/opened confirmation for a push notification sent in WordPress PNFPB notification 
	* Notification delivery and read statistics table pnfpb_ic_delivery_statistics_notifications
	*********************************************************************************************************/
	if ($pushtype === 'delivery_confirmation') {
		
		if ($delivered_notification_id > 0) {
			
			$statistics_table_name =	$wpdb->prefix . "pnfpb_ic_delivery_statistics_notifications";

			$dbname = $wpdb->dbname;
			/* Insert statistics notification table with delivered and read status for push notification sent */
			$notificationid_exists = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE notificationid = %d AND browser_token = %s", array($statistics_table_name,$delivered_notification_id,$delivered_notification_token)));

			if (empty($notificationid_exists)) {			
		
				$statistics_table_name =	$wpdb->prefix . "pnfpb_ic_delivery_statistics_notifications";

				$data = array('notificationid' => $delivered_notification_id, 'userid' => $delivered_notification_userid, 'title' => $delivered_notification_title, 'content' => $delivered_notification_content, 'browser_token' => $delivered_notification_token, 'browser_type' => $delivered_notification_browser, 'delivery_confirmation' => $delivered_notification_confirmation, 'open_confirmation' => $delivered_notification_opened_confirmation);

				$insertstatus = $wpdb->insert($statistics_table_name, $data);

				if ($insertstatus > 0) {
					/* Update total notifications delivered and read */
					$total_statistics_table_name =	$wpdb->prefix . "pnfpb_ic_total_statistics_notifications";
					$dbname = $wpdb->dbname;
					$notificationid_exists_total_table = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE notificationid = %d", array($total_statistics_table_name,$delivered_notification_id)));
					if (empty($notificationid_exists_total_table)) {
						$data = array('notificationid' => $delivered_notification_id, 'total_delivery_confirmation' => 1, 'total_open_confirmation' => 0);
						$insertstatus = $wpdb->insert($total_statistics_table_name, $data);
						if ($insertstatus > 0) {
								echo wp_json_encode(array('status' => 'success', 'statistics_type'=> 'total_statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));						
							} else {
								echo wp_json_encode(array('status' => 'failed', 'statistics_type'=> 'total_statistics_notifications', 'request_type' => $pushtype,'notificationid' => $delivered_notification_id));
							}
					} else {
						foreach ($notificationid_exists_total_table as $notification_result) {
							$delivered_notification_confirmation = $notification_result->total_delivery_confirmation + $delivered_notification_confirmation;
						}						
						$notificationid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET total_delivery_confirmation = %d WHERE notificationid = %d", $total_statistics_table_name,$delivered_notification_confirmation,$delivered_notification_id));
						if ($notificationid_update_status === false) {
							echo wp_json_encode(array('status' => 'failed', 'statistics_type'=> 'total_statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));
						} else {
							echo wp_json_encode(array('status' => 'updated', 'statistics_type'=> 'total_statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));
						}						
					}
					/* End of Update total notifications delivered and read */						
				} else {
					echo wp_json_encode(array('status' => 'failed', 'statistics_type'=> 'statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));
				}
			} else {
				/* Ignore if it is already updated */
				echo wp_json_encode(array('status' => 'duplicate', 'statistics_type'=> 'total_statistics_notifications', 'request_type' => $pushtype,'notificationid' => $delivered_notification_id));				
			}
		} else {
			/* If notification id is invalid */
			echo wp_json_encode(array('status' => 'invalid notification id', 'request_type' => $pushtype,'notificationid' => $delivered_notification_id));
		}
		
	}
	
	if ($pushtype === 'opened_confirmation') {
		
		if ($delivered_notification_id > 0) {
		
			$statistics_table_name =	$wpdb->prefix . "pnfpb_ic_delivery_statistics_notifications";

			$dbname = $wpdb->dbname;
			/* Insert/Update statistics notification table with delivered and read status for push notification sent */
			$notificationid_exists = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE notificationid = %d  AND browser_token = %s ", array($statistics_table_name,$delivered_notification_id,$delivered_notification_token)));

			if (empty($notificationid_exists)) {
				/* Insert statistics notification table with delivered and read status for push notification sent */
				$data = array('notificationid' => $delivered_notification_id, 'userid' => $delivered_notification_userid, 'title' => $delivered_notification_title, 'content' => $delivered_notification_content, 'browser_token' => $delivered_notification_token, 'browser_type' => $delivered_notification_browser, 'delivery_confirmation' => 1, 'open_confirmation' => $delivered_notification_opened_confirmation);

				$insertstatus = $wpdb->insert($statistics_table_name, $data);

				if ($insertstatus > 0) {
					/* Update total notifications delivered and read */
					$total_statistics_table_name =	$wpdb->prefix . "pnfpb_ic_total_statistics_notifications";
					$dbname = $wpdb->dbname;
					$notificationid_exists_total_table = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE notificationid = %d", array($total_statistics_table_name,$delivered_notification_id)));
					if (empty($notificationid_exists_total_table)) {
						$data = array('notificationid' => $delivered_notification_id, 'total_delivery_confirmation' => 1, 'total_open_confirmation' => $delivered_notification_opened_confirmation);
						$insertstatus = $wpdb->insert($total_statistics_table_name, $data);
						if ($insertstatus > 0) {
								echo wp_json_encode(array('status' => 'success', 'request_type' => $pushtype,'notificationid' => $delivered_notification_id));						
							} else {
								echo wp_json_encode(array('status' => 'failed', 'request_type' => $pushtype,'notificationid' => $delivered_notification_id));
							}
					} else {
						foreach ($notificationid_exists_total_table as $notification_result) {
							$delivered_notification_opened_confirmation = $notification_result->total_open_confirmation + $delivered_notification_opened_confirmation;
						}						
						$notificationid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET total_open_confirmation = %d WHERE notificationid = %d", $total_statistics_table_name,$delivered_notification_opened_confirmation,$delivered_notification_id));
						if ($notificationid_update_status === false) {
							echo wp_json_encode(array('status' => 'failed', 'statistics_type'=> 'total_statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));
						} else {
							echo wp_json_encode(array('status' => 'updated', 'statistics_type'=> 'total_statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));
						}						
					}
					/* End of Update total notifications delivered and read */
				} else {
					echo wp_json_encode(array('status' => 'failed', 'statistics_type'=> 'statistics_notifications', 'request_type' => $pushtype,'notificationid' => $delivered_notification_id));
				}				
			} else {
				foreach ($notificationid_exists as $notification_event) {
					if ($notification_event->open_confirmation < 1 ) {
						/* Update statistics notification table with delivered and read status for push notification sent */
						$notificationid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET open_confirmation = %d WHERE notificationid = %d AND browser_token = %s", $statistics_table_name,1,$delivered_notification_id,$delivered_notification_token));
						if ($notificationid_update_status === false) {
							echo wp_json_encode(array('status' => 'failed', 'statistics_type'=> 'statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));
						} else {
							/* Update total notifications delivered and read */
							$total_statistics_table_name =	$wpdb->prefix . "pnfpb_ic_total_statistics_notifications";
							$dbname = $wpdb->dbname;
							$notificationid_exists_total_table = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE notificationid = %d", array($total_statistics_table_name,$delivered_notification_id)));
							if (empty($notificationid_exists_total_table)) {
								$data = array('notificationid' => $delivered_notification_id, 'total_delivery_confirmation' => 1, 'total_open_confirmation' => $delivered_notification_opened_confirmation);
								$insertstatus = $wpdb->insert($total_statistics_table_name, $data);
								if ($insertstatus > 0) {
										echo wp_json_encode(array('status' => 'success', 'statistics_type'=> 'total_statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));						
									} else {
										echo wp_json_encode(array('status' => 'failed', 'statistics_type'=> 'total_statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));
									}
							} else {
								foreach ($notificationid_exists_total_table as $notification_result) {
									$delivered_notification_opened_confirmation = $notification_result->total_open_confirmation + $delivered_notification_opened_confirmation;
								}						
								$notificationid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET total_open_confirmation = %d WHERE notificationid = %d", $total_statistics_table_name,$delivered_notification_opened_confirmation,$delivered_notification_id));
								if ($notificationid_update_status === false) {
									echo wp_json_encode(array('status' => 'failed', 'statistics_type'=> 'total_statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));
								} else {
									echo wp_json_encode(array('status' => 'updated', 'statistics_type'=> 'total_statistics_notifications','request_type' => $pushtype,'notificationid' => $delivered_notification_id));
								}						
							}
							/* End of Update total notifications delivered and read */
						}
					}
				}
			}
		} else {
			echo wp_json_encode(array('status' => 'failed', 'request_type' => $pushtype,'notificationid' => $delivered_notification_id));
		}
		
	}	

	/*********************************************************************************************
	 * Add New user's Firebase subscription details in WordPress PNFPB plugin table
	 * pnfpb_ic_subscribed_deviceids_web
	 **********************************************************************************************/
	if (($bpdeviceid !== '' || $pnfpb_subscription_auth_token !== '') && $pushtype === 'normal') {
		$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
		$dbname = $wpdb->dbname;
		$deviceid_exists = [];
		if ($bpdeviceid !== '') {
			$deviceid_exists = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s", array($table,'%' . $wpdb->esc_like($bpdeviceid) . '%')));
		}
		if ($pnfpb_subscription_auth_token !== '') {
			$deviceid_exists = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE subscription_auth_token LIKE %s", array($table,'%' . $wpdb->esc_like($pnfpb_subscription_auth_token) . '%')));			
		}
		foreach ($deviceid_exists as $result) {
			if (($result->userid == 0 || ($result->userid != $bpuserid && $bpuserid !== 0)) && $bpdeviceid !== '') {
				$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET userid = %d WHERE device_id LIKE %s", $table,$bpuserid, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
			}
			if (($result->userid == 0 || ($result->userid != $bpuserid && $bpuserid !== 0)) && $pnfpb_subscription_auth_token !== '') {
				$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET userid = %d WHERE device_id LIKE %s OR subscription_auth_token LIKE %s", $table,$bpuserid, '%' . $wpdb->esc_like($pnfpb_subscription_auth_token) . '%'));
			}			
			if (is_null($result->web_auth) 
							|| is_null($result->web_256) 
							|| is_null($result->subscription_auth_token)
							|| ($result->web_auth === '')
							|| ($result->web_256 === '')
							|| ($result->subscription_auth_token === '')) {
				$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET web_auth = %s, web_256 = %s, subscription_auth_token = %s, ip_address = %s WHERE device_id LIKE %s", $table,$pnfpb_endpoint, $pnfpb_options, $pnfpb_subscription_auth_token, $pnfpb_ipaddress, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
			}
		}
		if (count($deviceid_exists) > 0) {
			echo "duplicate";
		} else {
			$data = array('userid' => $bpuserid, 'device_id' => $bpdeviceid, 'subscription_option' => $bpsubscribeoptions, 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'subscription_auth_token' => $pnfpb_subscription_auth_token, 'ip_address' => $pnfpb_ipaddress, 'firebase_version' => 'v5');
			$insertstatus = $wpdb->insert($table, $data);
			if ($insertstatus > 0) {
				echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
			} else {
				echo wp_json_encode(array('subscriptionstatus' => 'fail', 'subscriptionoptions' => $bpsubscribeoptions));
			}
			/*********************************************************************************************
			 * Firebase topic subscription
			 **********************************************************************************************/

			 $subscription_option_array = array();

			 if ($bpsubscribeoptions !== '') {
				 $subscription_option_array = str_split($bpsubscribeoptions);
			  }

			  if (get_option('pnfpb_httpv1_push') === '1' && $bpsubscribeoptions !== '' && (count($subscription_option_array) > 0 && $subscription_option_array[0] !== '1')) {
					$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_multiple_subscription_option_update($bpsubscribeoptions,$bpdeviceid);
			  }

			  if (get_option('pnfpb_httpv1_push') === '1' && (count($subscription_option_array) <= 0 || (count($subscription_option_array) > 0 && $subscription_option_array[0] === '1'))) {
					$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_default_subscription_option_update($bpdeviceid);
			   }
		}
	} else {
		/*********************************************************************************************
		 * Add user's Firebase subscription details from Frontend subscription button in WordPress
		 * PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
		 **********************************************************************************************/
		if ($pushtype === 'subscribe-button') {
			$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
			$dbname = $wpdb->dbname;

			$old_subscription_option = '';
			$old_subscription_option_values = $wpdb->get_col($wpdb->prepare("SELECT subscription_option FROM %i WHERE device_id LIKE %s", $table, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
			foreach ($old_subscription_option_values as $old_subscription_option_value) {
				$old_subscription_option = $old_subscription_option_value;
			}

			$subscription_option_array = array();
			$old_subscription_option_array = array();

			if ($bpsubscribeoptions !== '') {

				$subscription_option_array = str_split($bpsubscribeoptions);

				if (get_option('pnfpb_ic_fcm_buddypress_comments_radio_enable') === '2' && count($subscription_option_array) > 3 && $subscription_option_array[2] === '1') {
					$subscription_option_array[2] = '0';
					$subscription_option_array[3] = '1';
					$bpsubscribeoptions = implode("",$subscription_option_array);
				}

			}

			if ($old_subscription_option !== '') {

				$old_subscription_option_array = str_split($old_subscription_option);

				if (get_option('pnfpb_ic_fcm_buddypress_comments_radio_enable') === '2' && count($old_subscription_option_array) > 3 && $old_subscription_option_array[2] === '1') {
					$old_subscription_option_array[2] = '0';
					$old_subscription_option_array[3] = '1';
					$old_subscription_option = implode("",$old_subscription_option_array);
				}

			}

			if ($bpdeviceid !== '') {
				if ($bpuserid !== 0) {
					$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", $table,$bpsubscribeoptions, $bpuserid));
					$deviceid_group_update_status = $deviceid_update_status;
				} else {
					$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s AND device_id NOT LIKE %s", $table,$bpsubscribeoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%'));
					$deviceid_group_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s AND device_id LIKE %s", $table,$bpsubscribeoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%'));
				}
				$deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
				/*********************************************************************************************************************
				* Firebase topic subscription
				**********************************************************************************************************************/

				if (get_option('pnfpb_httpv1_push') === '1' && $bpsubscribeoptions !== '') {
						$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_multiple_subscription_option_update($bpsubscribeoptions,$bpdeviceid,'',$old_subscription_option,"v5");
				}

				if (get_option('pnfpb_httpv1_push') === '1' && (count($subscription_option_array) <= 0 || (count($subscription_option_array) > 0 && $subscription_option_array[0] === '1'))) {
					$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_default_subscription_option_update($bpdeviceid);
				 }
				 echo wp_json_encode(array('subscriptionstatus' => 'subscribed updated', 'subscriptionoptions' => $bpsubscribeoptions));
			 } else {
				if ($bpuserid !== 0) {
					$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE userid = %d", $table,$bpsubscribeoptions, $bpuserid));
				} else {
					$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s AND device_id NOT LIKE ", $table,$bpsubscribeoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%'));
					$deviceid_group_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s AND device_id LIKE %s", $table,$bpsubscribeoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%', '%' . $wpdb->esc_like('!!') . '%'));
				}
				$deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));

				/**********************************************************************************************************************************
				* Firebase topic subscription
				***********************************************************************************************************************************/
				if (get_option('pnfpb_httpv1_push') === '1' && $bpsubscribeoptions !== '') {
					$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_multiple_subscription_option_update($bpsubscribeoptions,$bpdeviceid,'',$old_subscription_option,"v5");
				}

				if (get_option('pnfpb_httpv1_push') === '1' && (count($subscription_option_array) <= '0' || (count($subscription_option_array) > 0 && $subscription_option_array[0] === '1'))) {
					$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_default_subscription_option_update($bpdeviceid);
				}
				echo wp_json_encode(array('subscriptionstatus' => 'subscribed webview', 'subscriptionoptions' => $bpsubscribeoptions));
			}
		} else {
			/*********************************************************************************************
			 * Check User's Push notification subscription details in WordPress PNFPB plugin table
			 * pnfpb_ic_subscribed_deviceids_web
			 **********************************************************************************************/
			if ($pushtype === 'checkdeviceid') {
				$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
				$dbname = $wpdb->dbname;
				$deviceid_select_status = [];
				if ($bpdeviceid !== '' || $pnfpb_subscription_auth_token !== '') {
					/* For Firebase */
					if ($bpdeviceid !== '') {
						$deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
					}
					/* If push notification switched between web-push and Firebase */
					if ($pnfpb_subscription_auth_token !== '') {
						$deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE subscription_auth_token LIKE %s", $table,'%' . $wpdb->esc_like($pnfpb_subscription_auth_token) . '%'));						
					}
					$subscribed = true;
					foreach ($deviceid_select_status as $result) {
						/* For Firebase */
						if (($result->userid == 0 || ($result->userid != $bpuserid && $bpuserid !== 0)) && $bpdeviceid !== '') {
							$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET userid = %d WHERE device_id LIKE %s", $table,$bpuserid, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
						}
						/* If push notification switched between web-push and Firebase */
						if (($result->userid == 0 || ($result->userid != $bpuserid && $bpuserid !== 0)) && $pnfpb_subscription_auth_token !== '') {
							$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET userid = %d WHERE device_id LIKE %s OR subscription_auth_token LIKE %s", $table,$bpuserid, '%' . $wpdb->esc_like($pnfpb_subscription_auth_token) . '%'));
						}
						$group_device_id_check = substr($result->device_id, 0, 2);
						$bpnewdeviceid = $bpdeviceid;
						if ($group_device_id_check === '!!') {
							$bpnewdeviceid = $bpdeviceid.$result->device_id;
						}
						if (is_null($result->web_auth) 
							|| is_null($result->web_256) 
							|| is_null($result->subscription_auth_token)
							|| ($result->web_auth === '')
							|| ($result->web_256 === '') 
							|| ($group_device_id_check === '!!')
							|| ($result->subscription_auth_token === '')) {
							$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET web_auth = %s, web_256 = %s, subscription_auth_token = %s, ip_address = %s, device_id = %s WHERE device_id LIKE %s", $table, $pnfpb_endpoint, $pnfpb_options, $pnfpb_subscription_auth_token, $pnfpb_ipaddress, $bpnewdeviceid, '%' . $wpdb->esc_like($result->device_id) . '%'));
						}
						$subscriptionoptions = $result->subscription_option;
						if ($subscriptionoptions === '10000' || $subscriptionoptions === '' || $subscriptionoptions === NULL || $subscriptionoptions === null || $subscriptionoptions === 'NULL') {
							$subscriptionoptions = '100000000000';
							$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE device_id LIKE %s", $table,$subscriptionoptions, '%' . $wpdb->esc_like($bpdeviceid) . '%'));
						}
						if (strpos($result->device_id, '@N') !== false || $subscriptionoptions === '000000000000' || $subscriptionoptions === '000000000010') {
							$subscribed = false;
						}
					}
				} else {
					$subscriptionoptions = '000000000000';
					if (($bpdeviceid === '' || $bpsubscribeoptions === '000000000000' || $bpsubscribeoptions === '') && $bpuserid != 0) {
						$deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE userid = %d", $table,$bpuserid));
						foreach ($deviceid_select_status as $result) {
							$subscriptionoptions = $result->subscription_option;
						}
					}
				}
				if ($deviceid_select_status != null && count($deviceid_select_status) > 0) {
					if ($subscribed) {
						echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $subscriptionoptions));
					} else {
						echo wp_json_encode(array('subscriptionstatus' => 'not-subscribed', 'subscriptionoptions' => $subscriptionoptions));
					}
				} else {
					if ($bpdeviceid !== '' || $pnfpb_endpoint !== '') {
						$data = array('userid' => $bpuserid, 'device_id' => $bpdeviceid, 'subscription_option' => '100000000000', 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'subscription_auth_token' => $pnfpb_subscription_auth_token, 'ip_address' => $pnfpb_ipaddress, 'firebase_version' => 'v5');
						$insertstatus = $wpdb->insert($table, $data);
						/*********************************************************************************************
						 * Automate Migrate user's subscription token from Legacy Firebase to latest Firebase httpv1
						 * api version in WordPress PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
						 **********************************************************************************************/
						if (get_option('pnfpb_httpv1_push') === '1') {
							$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_default_subscription_option_update($bpdeviceid);
						}
						if (get_option('pnfpb_httpv1_push') === '1' && $bpsubscribeoptions !== '' && (get_option('pnfpb_custom_prompt_options_on_off') === '1' || get_option('pnfpb_bell_icon_prompt_options_on_off') === '1' || get_option('pnfpb_ic_fcm_frontend_enable_subscription') === '1' || get_option('pnfpb_shortcode_enable') === 'yes')) {
							$PNFPB_ajax_subscription_update_obj->PNFPB_httpv1_multiple_subscription_option_update($bpsubscribeoptions,$bpdeviceid,'checkdeviceid','v5');
						}
						if ($insertstatus > 0) {
							echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
						} else {
							echo wp_json_encode(array('subscriptionstatus' => 'not-subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
						}						
					}
				}
			} else {
				/*********************************************************************************************
				 * Check User's Push notification subscription details for BuddyPress group in WordPress PNFPB
				 * plugin table pnfpb_ic_subscribed_deviceids_web
				 **********************************************************************************************/
				if (($bpdeviceid !== '' || $pnfpb_endpoint !== '') && $pushtype === 'checkdeviceidforgroup') {
					$bpgroupid = sanitize_text_field($_POST['bpgroup_id']);
					$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
					$deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE web_auth LIKE %s OR device_id LIKE %s AND userid = %d", $table,'%' . $wpdb->esc_like($pnfb_endpoint) .'%','%!!' . $bpgroupid. '!!%', $bpuserid));
					$subscribed = true;
					$subscriptionoptions = '000000000000';
					if (count($deviceid_select_status) > 0) {
						$version_value = 'L';
						foreach ($deviceid_select_status as $result) {
							$version_value = $result->firebase_version;
							$subscriptionoptions = $result->subscription_option;
							if ($subscriptionoptions === '10000' || $subscriptionoptions === '' || $subscriptionoptions === NULL || $subscriptionoptions === null || $subscriptionoptions === 'NULL') {
								$subscriptionoptions = '100000000000';
								$deviceid_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET subscription_option = %s WHERE web_auth LIKE %s OR device_id LIKE %s AND userid = %d", $table, $subscriptionoptions,'%' . $wpdb->esc_like($pnfb_endpoint) .'%','%!!' . $bpgroupid. '!!%', $bpuserid));
							}
							$webpush_option = get_option("pnfpb_webpush_push");
							$webpush_firebase = get_option("pnfpb_webpush_push_firebase");
							$group_device_id_check = substr($result->device_id, 0, 2);
							$group_device_identifier_array = explode("!!", $result->device_id);
							if ($bpdeviceid !== $result->device_id && $group_device_id_check === '!!' && count($group_device_identifier_array) > 1 && isset($group_device_identifier_array[1]) && $webpush_option !== '1' && $webpush_option !== '2' && $webpush_firebase !== '1' && get_option('pnfpb_httpv1_push') === '1') {
								$group_name = groups_get_slug($bpgroupid);
								$pnfpb_fbauth_token = get_option("pnfpb_firebase_oauth_token");

								if (get_option("pnfpb_firebase_oauth_token") === false || get_option("pnfpb_firebase_oauth_token") === "") {

									$client = new Google_Client();

									// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
									//
									$client->useApplicationDefaultCredentials();

									// Alternatively, provide the JSON authentication file directly.
									$configArray = json_decode(get_option("pnfpb_sa_json_data"), true);
									$client->setAuthConfig($configArray);

									// Add the scope as a string (multiple scopes can be provided as an array)
									$client->addScope("https://www.googleapis.com/auth/firebase.messaging");
									$client->refreshTokenWithAssertion();
									$pnfpb_fbauth_token_array = $client->getAccessToken();
									$pnfpb_fbauth_token = $pnfpb_fbauth_token_array["access_token"];
									update_option("pnfpb_firebase_oauth_token", $pnfpb_fbauth_token);
								}
								$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
								$headers = array('Authorization' => 'Bearer ' . $pnfpb_fbauth_token, 'Content-Type' => 'application/json', 'access_token_auth' => 'true');
								$grouptopic = "/topics/" . $group_name;
								$fields = array("to" => $grouptopic, "registration_tokens" => array($bpdeviceid));
								$body = wp_json_encode($fields);
								$args = array('httpversion' => '1.0', 'blocking' => false, 'sslverify' => false, 'body' => $body, 'headers' => $headers);
								$apiresults = wp_remote_post($url, $args);
								$deviceid_version_update_status = $wpdb->query($wpdb->prepare("UPDATE %i SET firebase_version = %s, device_id = %s WHERE device_id LIKE %s AND userid = %d",$table,'v5',$bpdeviceid.'!!'. $bpgroupid.'!!'.$group_device_identifier_array[1],'%!!'.$bpgroupid.'!!%',$bpuserid));
							}							
						}
						echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $subscriptionoptions));
					} else {
						echo wp_json_encode(array('subscriptionstatus' => 'not-subscribed', 'subscriptionoptions' => $subscriptionoptions));
					}
				} else {
					/*********************************************************************************************
					 * Update User's BuddyPress group Push notification subscription details in WordPress
					 * PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
					 **********************************************************************************************/
					if (($bpdeviceid !== '' || $pnfpb_endpoint !== '') && $pushtype === 'subscribe-group-button') {
						$bpgroupid = sanitize_text_field($_POST['bpgroup_id']);
						$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
						$dbname = $wpdb->dbname;
						$cookievalue = '';
						if (isset($_COOKIE['pnfpb_group_push_notification_' . $bpgroupid])) {
							$cookievalue = $_COOKIE['pnfpb_group_push_notification_' . $bpgroupid];
						}
						$bpnewdeviceid = $bpdeviceid . '!!' . $bpgroupid . '!!' . $cookievalue;
						$deviceid_select_status = $wpdb->get_results($wpdb->prepare("SELECT * FROM %i WHERE device_id LIKE %s OR web_auth LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%','%' . $wpdb->esc_like($pnfpb_endpoint) . '%'));
						$subscribed = true;
						$subscriptionoptions = '000000000000';
						foreach ($deviceid_select_status as $result) {
							$subscriptionoptions = $result->subscription_option;
						}
						$uniqueid = uniqid();
						setcookie('pnfpb_group_push_notification_' . $bpgroupid, $uniqueid, time() + (86400 * 30), "/"); // 86400 = 1 day
						$bpnewdeviceid = $bpdeviceid . '!!' . $bpgroupid . '!!' . $uniqueid;
						$data = array('userid' => $bpuserid, 'device_id' => $bpnewdeviceid, 'subscription_option' => $subscriptionoptions, 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'subscription_auth_token' => $pnfpb_subscription_auth_token, 'ip_address' => $pnfpb_ipaddress, 'firebase_version' => 'httpv3');
						$insertstatus = $wpdb->insert($table, $data);
						if ($insertstatus > 0) {
							echo wp_json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $subscriptionoptions));
						} else {
							echo wp_json_encode(array('subscriptionstatus' => 'deleted'));
						}
						if (get_option('pnfpb_httpv1_push') === '1') {
							$group_name = 'pnfpbgroupid' . $bpgroupid;
							$pnfpb_fbauth_token = get_option("pnfpb_firebase_oauth_token");
							
							if (get_option("pnfpb_firebase_oauth_token") === false || get_option("pnfpb_firebase_oauth_token") === "") {

								$client = new Google_Client();

								// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
								//
								$client->useApplicationDefaultCredentials();

								// Alternatively, provide the JSON authentication file directly.
								$configArray = json_decode(get_option("pnfpb_sa_json_data"), true);
								$client->setAuthConfig($configArray);

								// Add the scope as a string (multiple scopes can be provided as an array)
								$client->addScope("https://www.googleapis.com/auth/firebase.messaging");
								$client->refreshTokenWithAssertion();
								$pnfpb_fbauth_token_array = $client->getAccessToken();
								$pnfpb_fbauth_token = $pnfpb_fbauth_token_array["access_token"];
								update_option("pnfpb_firebase_oauth_token", $pnfpb_fbauth_token);
							}
							$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
							$headers = array('Authorization' => 'Bearer ' . $pnfpb_fbauth_token, 'Content-Type' => 'application/json', 'access_token_auth' => 'true');
							$grouptopic = "/topics/" . $group_name;
							$fields = array("to" => $grouptopic, "registration_tokens" => array($bpdeviceid));
							$body = wp_json_encode($fields);
							$args = array('httpversion' => '1.0', 'blocking' => false, 'sslverify' => false, 'body' => $body, 'headers' => $headers);
							$apiresults = wp_remote_post($url, $args);
						}						
					} else {
						/*********************************************************************************************
						 * Un-subscribe group push notification in PNFPB plugin table pnfpb_ic_subscribed_deviceids_web
						 **********************************************************************************************/
						if (($bpdeviceid !== '' || $pnfpb_endpoint !== '') && $pushtype === 'unsubscribe-group-button') {
							$bpgroupid = sanitize_text_field($_POST['bpgroup_id']);
							$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
							$cookievalue = '';
							if (isset($_COOKIE['pnfpb_group_push_notification_' . $bpgroupid])) {
								$cookievalue = $_COOKIE['pnfpb_group_push_notification_' . $bpgroupid];
							}
							$deviceid_update_status = 0;
							if (isset($bpdeviceid) && $bpdeviceid !== '') {
								$bpolddeviceid = $bpdeviceid . '!!' . $bpgroupid . '!!' . $cookievalue;
								$deviceid_update_status = $wpdb->query($wpdb->prepare("DELETE from %i WHERE userid = %d AND device_id LIKE %s", $table,$bpuserid, '%' . $wpdb->esc_like($bpolddeviceid) . '%'));
							} else {
								if (isset($pnfpb_endpoint) && $pnfpb_endpoint !== '') {
									$bpolddeviceid = '!!' . $bpgroupid . '!!' . $cookievalue;
									$deviceid_update_status = $wpdb->query($wpdb->prepare("DELETE from %i WHERE userid = %d AND web_auth LIKE %s AND device_id LIKE %s", $table,$bpuserid, '%' . $wpdb->esc_like($pnfpb_endpoint) . '%', '%' . $wpdb->esc_like($bpolddeviceid) . '%'));									
								}
							}
							if (get_option('pnfpb_httpv1_push') === '1') {
								$group_name = 'pnfpbgroupid' . $bpgroupid;
								$pnfpb_fbauth_token = get_option("pnfpb_firebase_oauth_token");

								if (get_option("pnfpb_firebase_oauth_token") === false || get_option("pnfpb_firebase_oauth_token") === "") {

									$client = new Google_Client();

									// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
									//
									$client->useApplicationDefaultCredentials();

									// Alternatively, provide the JSON authentication file directly.
									$configArray = json_decode(get_option("pnfpb_sa_json_data"), true);
									$client->setAuthConfig($configArray);

									// Add the scope as a string (multiple scopes can be provided as an array)
									$client->addScope("https://www.googleapis.com/auth/firebase.messaging");
									$client->refreshTokenWithAssertion();
									$pnfpb_fbauth_token_array = $client->getAccessToken();
									$pnfpb_fbauth_token = $pnfpb_fbauth_token_array["access_token"];
									update_option("pnfpb_firebase_oauth_token", $pnfpb_fbauth_token);
								}
								$url = 'https://iid.googleapis.com/iid/v1:batchRemove';
								$headers = array('Authorization' => 'Bearer ' . $pnfpb_fbauth_token, 'Content-Type' => 'application/json', 'access_token_auth' => 'true');
								$grouptopic = "/topics/" . $group_name;
								$fields = array("to" => $grouptopic, "registration_tokens" => array($bpdeviceid));
								$body = wp_json_encode($fields);
								$args = array('httpversion' => '1.0', 'blocking' => false, 'sslverify' => false, 'body' => $body, 'headers' => $headers);
								$apiresults = wp_remote_post($url, $args);
							}							
							if ($deviceid_update_status > 0) {
								echo wp_json_encode(array('subscriptionstatus' => 'deleted'));
							} else {
								echo wp_json_encode(array('subscriptionstatus' => 'failed in unsubscribe button'));
							}
						} else {
							/*********************************************************************************************
							 * Delete user's Push notification token in WordPress PNFPB plugin table
							 * pnfpb_ic_subscribed_deviceids_web
							 **********************************************************************************************/
							$table = $wpdb->prefix . 'pnfpb_ic_subscribed_deviceids_web';
							$deviceid_update_status = 0;
							if (isset($bpdeviceid) && $bpdeviceid !== '' && $pushtype === 'deletepushtoken') {
								$deviceid_update_status = $wpdb->query($wpdb->prepare("DELETE from %i WHERE device_id LIKE %s", $table,'%' . $wpdb->esc_like($bpdeviceid) . '%'));
								if ($deviceid_update_status > 0) {
									echo wp_json_encode(array('subscriptionstatus' => 'deleted', 'deviceidupdatestauts' => $deviceid_update_status, 'deviceid' => $bpdeviceid));
								} else {
									echo wp_json_encode(array('subscriptionstatus' => 'failed in deleting push token', 'deviceidupdatestauts' => $deviceid_update_status, 'deviceid' => $bpdeviceid));
								}
							} else {
								if (isset($pnfpb_endpoint)  && $pnfpb_endpoint !== '' && $pushtype === 'deletepushtoken') {
									$deviceid_update_status = $wpdb->query($wpdb->prepare("DELETE from %i WHERE web_auth LIKE %s", $table,'%' .$wpdb->esc_like($pnfpb_endpoint) . '%'));
									if ($deviceid_update_status > 0) {
										echo wp_json_encode(array('subscriptionstatus' => 'deleted', 'deviceidupdatestauts' => $deviceid_update_status, 'deviceid' => $bpdeviceid));
									} else {
										echo wp_json_encode(array('subscriptionstatus' => 'failed in deleting push token', 'deviceidupdatestauts' => $deviceid_update_status, 'deviceid' => $bpdeviceid));
									}
								} else {
									if ($pushtype !== 'icfirebasecred' && $pushtype !== 'icwebpushcred' && $pushtype !== 'onesignal_subscribed_users' && $pushtype !== 'onesignal_frontend_subscriptions' && $pushtype !== 'onesignal_get_frontend_subscriptions' && $pushtype !== 'webtoapp_subscribed_users' && $pushtype !== 'progressier_subscribed_users' && $pushtype !== 'progressier_frontend_subscriptions' && $pushtype !== 'progressier_get_frontend_subscriptions' && $pushtype !== 'delivery_confirmation' && $pushtype !== 'opened_confirmation') {
										echo wp_json_encode(array('subscriptionstatus' => 'failed'));
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
wp_die();
?>